/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var rayql = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,54,60,63,65,73,74,75,76],$V1=[1,19],$V2=[5,31,36,38,54],$V3=[2,73],$V4=[1,24],$V5=[1,25],$V6=[1,26],$V7=[1,27],$V8=[1,30],$V9=[1,37],$Va=[1,36],$Vb=[5,31],$Vc=[2,23],$Vd=[1,43],$Ve=[1,44],$Vf=[5,26,31,36,38,60,63,65],$Vg=[2,68],$Vh=[1,46],$Vi=[5,26,31,36,38,54,60,63,65],$Vj=[5,26,31,36,38,54,60,63,65,73],$Vk=[5,63,65],$Vl=[5,23,31,45,46,49,56,63,65],$Vm=[5,31,36,38,54,73,74,75,76],$Vn=[1,64],$Vo=[1,62],$Vp=[1,63],$Vq=[5,65],$Vr=[2,53],$Vs=[1,68],$Vt=[1,70],$Vu=[26,54],$Vv=[1,80],$Vw=[1,81],$Vx=[45,46,49,56],$Vy=[1,96],$Vz=[22,59],$VA=[5,31,63,65],$VB=[2,63],$VC=[1,114];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"start":3,"query":4,"EOF":5,"search_query":6,"match_query":7,"sequence_query":8,"join_query":9,"tag_query":10,"tag":11,"literal_array":12,"where":13,"where_part":14,"sequence":15,"optional_unordered":16,"in":17,"time_window":18,"object_selected_list":19,"optional_time_window":20,"unordered":21,"NUMBER":22,"ID":23,"object_selected":24,"object":25,"by":26,"match_part":27,"match":28,"match_list":29,"relation_chain":30,",":31,"relation":32,"out_relation":33,"in_relation":34,"both_relation":35,"-":36,">":37,"<":38,"search":39,"select_search":40,"aggregations":41,"expand_part":42,"condition":43,"simple_condition":44,"or":45,"and":46,"!":47,"(":48,")":49,"field_operator":50,"literal":51,"all":52,"any":53,"[":54,"literals":55,"]":56,"=":57,"!=":58,"LITERAL":59,"select":60,"field_list":61,"aggregation":62,"aggregate":63,"aggregation_term":64,"expand":65,"aggregation_terms":66,"aggregation_type":67,"optional_key_values":68,"key_values":69,"key_value":70,"object_def":71,"object_type":72,":":73,"Log":74,"Process":75,"User":76,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"join_query",11:"tag",13:"where",15:"sequence",17:"in",21:"unordered",22:"NUMBER",23:"ID",26:"by",28:"match",31:",",36:"-",37:">",38:"<",39:"search",45:"or",46:"and",47:"!",48:"(",49:")",52:"all",53:"any",54:"[",56:"]",57:"=",58:"!=",59:"LITERAL",60:"select",63:"aggregate",65:"expand",73:":",74:"Log",75:"Process",76:"User"},
productions_: [0,[3,2],[4,1],[4,1],[4,1],[4,1],[4,1],[10,4],[8,5],[20,2],[20,0],[16,2],[16,1],[16,0],[18,2],[19,2],[19,1],[24,3],[7,1],[27,2],[29,4],[29,2],[30,3],[30,0],[32,1],[32,1],[32,1],[33,4],[34,4],[35,3],[6,6],[43,1],[43,3],[43,3],[43,2],[43,3],[44,3],[44,3],[44,3],[12,3],[55,3],[55,1],[50,1],[50,1],[50,1],[50,1],[51,1],[51,1],[40,2],[40,0],[61,3],[61,1],[41,2],[41,0],[62,2],[42,2],[42,0],[66,3],[66,1],[64,4],[64,2],[67,1],[68,1],[68,0],[69,2],[69,1],[70,3],[14,3],[14,0],[25,2],[71,3],[71,1],[71,2],[71,0],[72,1],[72,1],[72,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 7:
 this.$ = AST.tag($$[$0-2], $$[$0]) 
break;
case 8:
 this.$ = AST.sequence($$[$0-3], $$[$0-1], $$[$0]) 
break;
case 9: case 11: case 19: case 48: case 54: case 55:
 this.$ = $$[$0] 
break;
case 12:
 this.$ = 'all' 
break;
case 14:
 this.$ = AST.timeWindow($$[$0-1], $$[$0]) 
break;
case 15: case 52: case 64:
 this.$ = $$[$0].concat($$[$0-1]) 
break;
case 16: case 41: case 51: case 58: case 65:
 this.$ = [$$[$0]] 
break;
case 17:
 this.$ = AST.objectSelected($$[$0-2], $$[$0]) 
break;
case 18:
 this.$ = AST.match($$[$0]) 
break;
case 20:
 this.$ = $$[$0].concat(AST.matchList($$[$0-3], $$[$0-2])) 
break;
case 21:
 this.$ = [AST.matchList($$[$0-1], $$[$0])] 
break;
case 22:
 this.$ = AST.relations($$[$0-2], $$[$0-1], $$[$0])
break;
case 27:
 this.$ = AST.relation($$[$0-2], 'out') 
break;
case 28:
 this.$ = AST.relation($$[$0-2], 'in') 
break;
case 29:
 this.$ = AST.relation($$[$0-1], 'both') 
break;
case 30:
 this.$ = AST.search($$[$0-3], $$[$0-4], $$[$0-2], $$[$0-1], $$[$0]) 
break;
case 32:
 this.$ = AST.or($$[$0-2], $$[$0]) 
break;
case 33:
 this.$ = AST.and($$[$0-2], $$[$0]) 
break;
case 34:
 this.$ = AST.not($$[$0]) 
break;
case 35: case 39: case 67:
 this.$ = $$[$0-1] 
break;
case 36:
 this.$ = AST.operation($$[$0-2], $$[$0-1], $$[$0]) 
break;
case 37:
 this.$ = AST.all($$[$0-2], $$[$0]) 
break;
case 38:
 this.$ = AST.any($$[$0-2], $$[$0]) 
break;
case 40: case 50: case 57:
 this.$ = $$[$0].concat($$[$0-2]) 
break;
case 53: case 63:
 this.$ = [] 
break;
case 59:
 this.$ = AST.aggregation($$[$0-3], $$[$0-1], $$[$0])
break;
case 60:
 this.$ = AST.aggregation($$[$0-1], undefined, $$[$0])
break;
case 66:
 this.$ = AST.keyValue($$[$0-2], $$[$0]) 
break;
case 69:
 this.$ = AST.object($$[$0-1], $$[$0]) 
break;
case 70:
 this.$ = AST.objectDef($$[$0-2], $$[$0])
break;
case 71:
 this.$ = AST.objectDef($$[$0])
break;
case 72:
 this.$ = AST.objectDef(undefined, $$[$0])
break;
case 73:
 this.$ = AST.objectDef()
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:[1,6],10:7,11:[1,11],15:[1,10],27:9,28:[1,12],39:[1,8]},{1:[3]},{5:[1,13]},{5:[2,2]},{5:[2,3]},{5:[2,4]},{5:[2,5]},{5:[2,6]},o($V0,[2,10],{20:14,17:[1,15]}),{5:[2,18]},{16:16,17:[2,13],21:[1,17]},{12:18,54:$V1},o($V2,$V3,{29:20,25:21,71:22,72:23,73:$V4,74:$V5,75:$V6,76:$V7}),{1:[2,1]},o([5,54,60,63,65],$V3,{71:22,72:23,25:28,73:$V4,74:$V5,75:$V6,76:$V7}),{18:29,22:$V8},{17:[1,31]},{17:[2,12],22:[1,32]},{13:[1,33]},{22:$V9,51:35,55:34,59:$Va},{5:[2,19]},o($Vb,$Vc,{30:38,32:39,33:40,34:41,35:42,36:$Vd,38:$Ve}),o($Vf,$Vg,{14:45,54:$Vh}),o($Vi,[2,71],{73:[1,47]}),{23:[1,48]},o($Vj,[2,74]),o($Vj,[2,75]),o($Vj,[2,76]),o($Vk,[2,49],{40:49,60:[1,50]}),o($V0,[2,9]),{23:[1,51]},{18:52,22:$V8},{17:[2,11]},{5:$Vg,14:53,54:$Vh},{56:[1,54]},{31:[1,55],56:[2,41]},o($Vl,[2,46]),o($Vl,[2,47]),{5:[2,21],31:[1,56]},o($V2,$V3,{71:22,72:23,25:57,73:$V4,74:$V5,75:$V6,76:$V7}),o($Vm,[2,24]),o($Vm,[2,25]),o($Vm,[2,26]),{23:[1,58]},{36:[1,59]},o($Vf,[2,69]),{23:$Vn,43:60,44:61,47:$Vo,48:$Vp},{23:[1,65]},o($Vi,[2,72]),o($Vq,$Vr,{41:66,62:67,63:$Vs}),{23:$Vt,61:69},o([5,26,54,60,63,65,73,74,75,76],[2,14]),o($Vu,$V3,{71:22,72:23,19:71,24:72,25:73,73:$V4,74:$V5,75:$V6,76:$V7}),{5:[2,7]},o([13,45,46,49,56],[2,39]),{22:$V9,51:35,55:74,59:$Va},o($V2,$V3,{25:21,71:22,72:23,29:75,73:$V4,74:$V5,75:$V6,76:$V7}),o($Vb,$Vc,{32:39,33:40,34:41,35:42,30:76,36:$Vd,38:$Ve}),{36:[1,77]},{23:[1,78]},{45:$Vv,46:$Vw,56:[1,79]},o($Vx,[2,31]),{23:$Vn,43:82,44:61,47:$Vo,48:$Vp},{23:$Vn,43:83,44:61,47:$Vo,48:$Vp},{37:[1,89],38:[1,90],50:84,52:[1,85],53:[1,86],57:[1,87],58:[1,88]},o($Vi,[2,70]),{5:[2,56],42:91,65:[1,92]},o($Vq,$Vr,{62:67,41:93,63:$Vs}),{23:$Vy,64:94,67:95},o($Vk,[2,48]),o($Vk,[2,51],{31:[1,97]}),{5:[2,8]},o($Vu,$V3,{71:22,72:23,24:72,25:73,19:98,5:[2,16],73:$V4,74:$V5,75:$V6,76:$V7}),{26:[1,99]},{56:[2,40]},{5:[2,20]},o($Vb,[2,22]),o($Vm,[2,29],{37:[1,100]}),{36:[1,101]},o($Vf,[2,67]),{23:$Vn,43:102,44:61,47:$Vo,48:$Vp},{23:$Vn,43:103,44:61,47:$Vo,48:$Vp},o($Vx,[2,34]),{45:$Vv,46:$Vw,49:[1,104]},{22:$V9,51:105,59:$Va},{12:106,54:$V1},{12:107,54:$V1},o($Vz,[2,42]),o($Vz,[2,43]),o($Vz,[2,44]),o($Vz,[2,45]),{5:[2,30]},{23:$Vy,64:109,66:108,67:95},o($Vq,[2,52]),o($Vk,[2,54]),o($VA,$VB,{68:111,69:112,70:113,23:$VC,26:[1,110]}),o([5,23,26,31,63,65],[2,61]),{23:$Vt,61:115},{5:[2,15]},{23:[1,116]},o($Vm,[2,27]),o($Vm,[2,28]),o([45,49,56],[2,32],{46:$Vw}),o($Vx,[2,33]),o($Vx,[2,35]),o($Vx,[2,36]),o($Vx,[2,37]),o($Vx,[2,38]),{5:[2,55]},{5:[2,58],31:[1,117]},{23:[1,118]},o($VA,[2,60]),o($VA,[2,62]),o($VA,[2,65],{70:113,69:119,23:$VC}),{57:[1,120]},o($Vk,[2,50]),o([5,26,54,73,74,75,76],[2,17]),{23:$Vy,64:109,66:121,67:95},o($VA,$VB,{69:112,70:113,68:122,23:$VC}),o($VA,[2,64]),{22:$V9,51:123,59:$Va},{5:[2,57]},o($VA,[2,59]),o([5,23,31,63,65],[2,66])],
defaultActions: {3:[2,2],4:[2,3],5:[2,4],6:[2,5],7:[2,6],9:[2,18],13:[2,1],20:[2,19],32:[2,11],53:[2,7],71:[2,8],74:[2,40],75:[2,20],91:[2,30],98:[2,15],108:[2,55],121:[2,57]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return yyval.$;
        }
    }
    return yyval.$;
}};

var AST = require('./ast.js')

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 22
break;
case 2:return 11
break;
case 3:return 39
break;
case 4:return 13
break;
case 5:return 28
break;
case 6:return 15
break;
case 7:return 21
break;
case 8:return 46
break;
case 9:return 45
break;
case 10:return 53
break;
case 11:return 52
break;
case 12:return 63
break;
case 13:return 65
break;
case 14:return 17
break;
case 15:return 60
break;
case 16:return 'filter'
break;
case 17:return 'primary'
break;
case 18:return 26
break;
case 19:return 48
break;
case 20:return 49
break;
case 21:return 54
break;
case 22:return 56
break;
case 23:return 31
break;
case 24:return '|'
break;
case 25:return 57
break;
case 26:return 58
break;
case 27:return 47
break;
case 28:return 36
break;
case 29:return 37
break;
case 30:return 38
break;
case 31:return 73
break;
case 32:return 31
break;
case 33:return 74
break;
case 34:return 75
break;
case 35:return 76
break;
case 36:return 59;
break;
case 37:return 23;
break;
case 38:return 'time_interval';
break;
case 39:return 5
break;
case 40:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:tag\b)/,/^(?:search\b)/,/^(?:where\b)/,/^(?:match\b)/,/^(?:sequence\b)/,/^(?:unordered\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:any\b)/,/^(?:all\b)/,/^(?:aggregate\b)/,/^(?:expand\b)/,/^(?:in\b)/,/^(?:select\b)/,/^(?:filter\b)/,/^(?:primary\b)/,/^(?:by\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\|)/,/^(?:=)/,/^(?:!=)/,/^(?:!)/,/^(?:-)/,/^(?:>)/,/^(?:<)/,/^(?::)/,/^(?:,)/,/^(?:Log\b)/,/^(?:Process\b)/,/^(?:User\b)/,/^(?:('(\\.|[^'\\]|\*)*'))/,/^(?:([a-zA-Z\@][a-zA-Z0-9_\.]*))/,/^(?:([0-9]*[hymMdqy]))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = rayql;
exports.Parser = rayql.Parser;
exports.parse = function () { return rayql.parse.apply(rayql, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}